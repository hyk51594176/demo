{"version":3,"sources":["pages/usercenter/MenuMange.tsx"],"names":[],"mappings":"wGAAA,OAmgBe","file":"static/js/4.ed1f02bb.chunk.js","sourcesContent":["// interface ButtonView {\n//   parentId: number\n//   sysId: number\n//   menuName: string\n//   menuUrl: string\n//   isRoute: string\n//   menuSort: number\n//   menuId: null | number\n//   menuType: number\n//   isEdit: boolean\n// }\n\n// interface BtnColumns {\n//   prop: string\n//   el: string | null\n// }\n\n// @Component({\n//   components: {\n//     PageTemplate\n//   }\n// })\n// export default class MenuMange extends Vue {\n//   btnAuthShow = false\n//   buttonView: Array<ButtonView> = []\n//   btnObj = {} as any\n//   dialgeTitle = ''\n//   formData = {\n//     keyWords: ''\n//   } as any\n//   dialogShow = false\n//   selectList = []\n//   dialogData = {\n//     sysId: null,\n//     url: {}\n//   } as any\n//   paramsColumns = [\n//     {\n//       label: 'api类别',\n//       prop: 'key',\n//       width: 80\n//     },\n//     {\n//       label: 'api请求地址',\n//       prop: 'value',\n//       align: 'left',\n//       headerAlign: 'center'\n//     }\n//   ]\n//   tableData = []\n//   get tableColumns(): Array<any> {\n//     return [\n//       {\n//         label: '菜单名称',\n//         prop: 'menuName',\n//         width: 140,\n//         showOverflowTooltip: true,\n//         align: 'left'\n//       },\n//       {\n//         label: '菜单索引',\n//         prop: 'menuSort',\n//         width: 70\n//       },\n//       {\n//         label: '菜单图标',\n//         prop: 'icon',\n//         width: 70,\n//         showOverflowTooltip: true\n//       },\n\n//       {\n//         label: '是否路由',\n//         prop: 'isRoute',\n//         width: 70,\n//         format(obj: any) {\n//           return obj.isRoute === '0' ? '否' : '是'\n//         }\n//       },\n//       {\n//         label: '菜单类型',\n//         prop: 'menuType',\n//         width: 70,\n//         format(obj: any) {\n//           switch (obj.menuType) {\n//             case 1:\n//               return '父级菜单'\n//             case 2:\n//               return '叶子菜单'\n//             case 3:\n//               return '接口'\n//             case 4:\n//               return '按钮'\n//             default:\n//               return obj.menuType\n//           }\n//         }\n//       },\n//       {\n//         label: '菜单路径',\n//         prop: 'menuUrl',\n//         showOverflowTooltip: true\n//       },\n//       {\n//         label: '组件路径',\n//         prop: 'component',\n//         showOverflowTooltip: true\n//       },\n//       {\n//         label: '操作权限',\n//         prop: 'buttonView',\n//         align: 'left',\n//         render(h: any, { row }: any) {\n//           if (row.buttonView && row.buttonView.length) {\n//             return (\n//               <div>\n//                 {row.buttonView.map((obj: any) => (\n//                   <el-tag disableTransitions={true}>{obj.menuName}</el-tag>\n//                 ))}\n//               </div>\n//             )\n//           }\n//         }\n//       },\n//       {\n//         label: '修改时间',\n//         prop: 'modifyDate',\n//         width: 90\n//       },\n//       {\n//         label: '修改人',\n//         width: 80,\n//         prop: 'modifyUser'\n//       },\n//       {\n//         label: '操作',\n//         prop: 'btn',\n//         width: 170\n//       }\n//     ]\n//   }\n//   formColumns = [\n//     {\n//       el: 'mSelect',\n//       prop: 'sysId',\n//       label: '所属系统',\n//       getList: () =>\n//         this.$api.getAllSysParam().then(({ data }: any) => ({ data: data.sysParamInfos })),\n//       valueKey: {\n//         value: 'sysId',\n//         label: 'systemName'\n//       },\n//       rules: {\n//         required: true,\n//         message: '请选择所属系统',\n//         trigger: 'change'\n//       },\n//       span: 9\n//     },\n//     {\n//       el: 'input',\n//       label: '关键字搜索',\n//       prop: 'keyWords',\n//       span: 9\n//     },\n//     {\n//       span: 6,\n//       prop: 'btn'\n//     }\n//   ]\n//   get btnColumns() {\n//     return [\n//       {\n//         label: '按钮名称',\n//         prop: 'menuName'\n//       },\n//       {\n//         label: 'api接口',\n//         prop: 'menuUrl'\n//       },\n//       {\n//         prop: 'btn',\n//         label: '操作',\n//         width: 90,\n//         render: (h: any, scope: any) => {\n//           return (\n//             <div>\n//               <el-button type=\"text\" onClick={this.delBtn.bind(this, scope)}>\n//                 {scope.row.isEdit ? '取消' : '删除'}{' '}\n//               </el-button>{' '}\n//               &nbsp;\n//               <el-button type=\"text\" onClick={this.addOrEditBtn.bind(this, scope.row)}>\n//                 {scope.row.isEdit ? '保存' : '编辑'}\n//               </el-button>\n//             </div>\n//           )\n//         }\n//       }\n//     ]\n//   }\n//   isRest = false\n//   get dialogColumns() {\n//     return [\n//       {\n//         el: 'input',\n//         prop: 'menuName',\n//         label: '菜单名称',\n//         rules: {\n//           required: true,\n//           message: '请输入菜单名称',\n//           trigger: 'blur'\n//         }\n//       },\n//       {\n//         el: 'input',\n//         prop: 'icon',\n//         label: '菜单图标'\n//       },\n//       {\n//         label: '菜单类型',\n//         prop: 'menuType',\n//         el: 'mSelect',\n//         dataList: [\n//           {\n//             label: '父级菜单',\n//             value: 1\n//           },\n//           {\n//             label: '叶子菜单',\n//             value: 2\n//           }\n//         ],\n//         disabled: !!this.dialogData.menuId,\n//         rules: {\n//           required: true,\n//           message: '请选择菜单类型',\n//           trigger: 'change'\n//         }\n//       },\n//       {\n//         el: 'input-number',\n//         min: 0,\n//         prop: 'menuSort',\n//         label: '菜单索引',\n//         controlsPosition: 'right',\n//         rules: {\n//           required: true,\n//           message: '请输入菜单索引',\n//           trigger: 'change',\n//           type: 'number'\n//         }\n//       },\n//       ...(this.dialogData.menuType === 2\n//         ? [\n//             {\n//               el: 'mSelect',\n//               prop: 'parentId',\n//               label: '父级菜单',\n//               getList: this.getList,\n//               valueKey: {\n//                 label: 'menuName',\n//                 value: 'menuId'\n//               },\n//               params: {\n//                 sysId: 'sysId',\n//                 type: 'menuType'\n//               },\n//               rules: {\n//                 required: true,\n//                 message: '请输选择父菜单',\n//                 trigger: 'change'\n//               }\n//             }\n//           ]\n//         : []),\n//       {\n//         label: '是否路由',\n//         prop: 'isRoute',\n//         el: 'checkbox',\n//         trueLabel: '1',\n//         falseLabel: '0'\n//       },\n//       ...(this.dialogData.isRoute === '1'\n//         ? [\n//             {\n//               el: 'input',\n//               prop: 'component',\n//               label: '组件路径',\n//               rules: {\n//                 required: true,\n//                 message: '请输入组件路径',\n//                 trigger: 'blur'\n//               }\n//             },\n//             {\n//               el: 'input',\n//               prop: 'menuUrl',\n//               label: 'url地址',\n//               rules: {\n//                 required: true,\n//                 trigger: 'blur',\n//                 validator(rule: any, value: any, callback: any) {\n//                   if (!value) {\n//                     callback(new Error('请输入url地址'))\n//                   } else if (value.endsWith('/prototype/')) {\n//                     callback(new Error('请补全url地址'))\n//                   } else {\n//                     callback()\n//                   }\n//                 }\n//               }\n//             }\n//           ]\n//         : [])\n//     ]\n//   }\n\n//   @Watch('btnAuthShow')\n//   watchBtnAuthShow(val: any): void {\n//     if (!val && this.isRest) {\n//       this.getTableList()\n//     }\n//   }\n\n//   @Watch('dialogData.isRoute')\n//   watchIsRoute(val: any): void {\n//     if (val === '1' && this.dialogData.sysId === '835765924' && !this.dialogData.menuId) {\n//       this.dialogData.component = 'demo/index'\n//       this.dialogData.menuUrl = `/prototype/`\n//     }\n//   }\n\n//   addOrEditBtn(row: any): any {\n//     if (row.isEdit) {\n//       if (!row.menuName) return this.$message.error('请输入按钮名称')\n//       this.$api.addSysFunction(row).then((res: any) => {\n//         row.isEdit = false\n//         row.menuId = res.data.functionId\n//         this.isRest = true\n//       })\n//     } else {\n//       row.isEdit = true\n//     }\n//   }\n\n//   getBtnColumns(type: string, isEdit: boolean): BtnColumns {\n//     if (type === 'menuUrl') {\n//       return {\n//         prop: 'menuUrl',\n//         el: isEdit ? 'input' : null\n//       }\n//     } else {\n//       return {\n//         prop: 'menuName',\n//         el: isEdit ? 'input' : null\n//       }\n//     }\n//   }\n\n//   $refs!: {\n//     sform: any\n//     dform: any\n//   }\n//   addChild(obj: ButtonView) {\n//     this.$refs.sform.validate().then(() => {\n//       this.dialgeTitle = '新增菜单'\n//       this.dialogShow = true\n//       this.dialogData = {\n//         isRoute: '1',\n//         menuType: 2,\n//         sysId: this.formData.sysId,\n//         parentId: obj.menuId,\n//         component: this.formData.sysId === '835765924' ? 'demo/index' : '',\n//         menuUrl: this.formData.sysId === '835765924' ? '/prototype/' : ''\n//       }\n//     })\n//   }\n\n//   showDialog(obj: ButtonView = {} as ButtonView) {\n//     this.$refs.sform.validate().then(() => {\n//       this.dialogShow = true\n//       this.dialogData = {\n//         isRoute: '0',\n//         sysId: this.formData.sysId,\n//         ...obj\n//       }\n\n//       if (obj.menuId) {\n//         this.dialgeTitle = '编辑菜单'\n//       } else {\n//         this.dialgeTitle = '新增菜单'\n//       }\n//     })\n//   }\n\n//   formatTreeData(arr: Array<any>, list: Array<any> = []) {\n//     const obj = arr[0]\n//     if (!obj) return []\n//     if (!obj.parentId) list.push(obj)\n//     if (obj.menuType === 4) {\n//       const parentMenu = arr.find(p => p.menuId === obj.parentId)\n//       ;(parentMenu.buttonView || (parentMenu.buttonView = [])).push(obj)\n//       arr.shift()\n//     } else {\n//       arr = arr.filter((item, index) => {\n//         if (index === 0) return false\n//         if (item.menuType === 4) {\n//           if (item.parentId === obj.menuId) (obj.buttonView || (obj.buttonView = [])).push(item)\n//           else {\n//             const parentMenu = arr.find(p => p.menuId === item.parentId)\n//             if (parentMenu) {\n//               ;(parentMenu.buttonView || (parentMenu.buttonView = [])).push(item)\n//             }\n//           }\n//           return false\n//         } else {\n//           if (item.parentId === obj.menuId) (obj.children || (obj.children = [])).push(item)\n//           if (item.menuId === obj.parentId) (item.children || (item.children = [])).push(obj)\n//           return item.parentId !== obj.menuId\n//         }\n//       })\n//     }\n//     if (arr.length) this.formatTreeData(arr, list)\n//     return list\n//   }\n\n//   getTableList() {\n//     this.$refs.sform.validate().then(() => {\n//       this.getList(this.formData).then((res: any) => {\n//         this.isRest && (this.isRest = false)\n//         this.tableData = this.formData.keyWords ? res.data : this.formatTreeData(res.data)\n//       })\n//     })\n//   }\n\n//   getList(params: any) {\n//     if (!params.sysId) return Promise.resolve({ data: [] })\n//     return this.$api.getAllFunctionBySysId(params).then(({ data }: any) => {\n//       const obj = { data: data.menuInfos }\n//       if (params.type === 2) {\n//         obj.data = obj.data.filter((item: any) => item.menuType === 1)\n//       }\n//       return obj\n//     })\n//   }\n\n//   addOrEdit() {\n//     this.$refs.dform.validate().then(() => {\n//       const params = {\n//         ...this.dialogData\n//       }\n//       if (params.isRoute === '0') {\n//         params.menuUrl = '#'\n//         params.component = null\n//       }\n//       if (!params.parentId) params.parentId = 0\n//       this.$api.addSysFunction(params).then(() => {\n//         this.dialogShow = false\n//         this.getTableList()\n//       })\n//     })\n//   }\n\n//   deleteData(obj: any) {\n//     if (obj.children && obj.children.length) {\n//       let str = obj.children.map((item: any) => '【' + item.menuName + '】').join('、')\n//       let msg = `【${obj.menuName}】下存在叶子菜单 ${str}, 不能删除,请先删除叶子菜单!`\n//       this.$alert(msg, '提示', { type: 'warning' })\n//       return Promise.reject(new Error(msg))\n//     }\n//     if (obj.buttonView && obj.buttonView.length) {\n//       let str = obj.buttonView.map((item: any) => '【' + item.menuName + '】').join('、')\n//       let msg = `【${obj.menuName}】下存在操作权限 ${str}, 不能删除`\n//       this.$alert(msg, '提示', { type: 'warning' })\n//       return Promise.reject(new Error(msg))\n//     }\n//     return this.$api.deleteSysFunction({ id: obj.menuId }).then(() => {\n//       this.getTableList()\n//     })\n//   }\n\n//   btnAuth(obj: any) {\n//     this.btnAuthShow = true\n//     this.btnObj = obj\n//     this.buttonView = (obj.buttonView || []).map((b: any) => ({ ...b, isEdit: false }))\n//   }\n\n//   addBtn() {\n//     this.buttonView.push({\n//       parentId: this.btnObj.menuId,\n//       sysId: this.btnObj.sysId,\n//       menuName: '',\n//       menuUrl: '',\n//       isRoute: '0',\n//       menuSort: this.buttonView.length,\n//       menuId: null,\n//       menuType: 4,\n//       isEdit: true\n//     })\n//   }\n\n//   delBtn({ row, $index }: any) {\n//     if (row.isEdit) {\n//       row.isEdit = false\n//       return\n//     }\n//     if (row.menuId) {\n//       this.deleteData(row).then(() => {\n//         this.buttonView.splice($index, 1)\n//       })\n//     } else {\n//       this.buttonView.splice($index, 1)\n//     }\n//   }\n// }\nexport default {}\n"],"sourceRoot":""}